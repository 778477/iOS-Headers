/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "APSConnectionServerDelegate-Protocol.h"
#import "APSOutgoingMessageQueueDelegate-Protocol.h"
#import "APSTCPStreamDelegate-Protocol.h"
#import "PCConnectionManagerDelegate-Protocol.h"
#import "PCInterfaceUsabilityMonitorDelegate-Protocol.h"

@class APSEnvironment, APSOutgoingMessageQueue, APSProtocolParser, APSTCPStream, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSNumber, NSString, NSTimer, PCConnectionManager, PCNonCellularUsabilityMonitor, PCPersistentTimer, PCWWANUsabilityMonitor;

@interface APSCourier : NSObject <APSTCPStreamDelegate, APSConnectionServerDelegate, APSOutgoingMessageQueueDelegate, PCConnectionManagerDelegate, PCInterfaceUsabilityMonitorDelegate>
{
    id <APSCourierDelegate> _delegate;
    APSEnvironment *_environment;
    NSMutableArray *_connections;
    struct __SecIdentity *_clientIdentity;
    APSTCPStream *_tcpStream;
    APSProtocolParser *_protocolParser;
    PCConnectionManager *_connectionManager;
    BOOL _enabled;
    BOOL _enableCriticalReliability;
    NSTimer *_criticalFlushTimer;
    BOOL _forcedWWANInterface;
    BOOL _isConnectedToService;
    BOOL _useStandardPort;
    unsigned int _consecutiveConnectionFailureCount;
    NSDate *_lastConnectionAttempt;
    PCPersistentTimer *_pendingMessageReconnectTimer;
    double _lastClientRequestedKeepaliveTime;
    double _lastLateCriticalOutgoingMessageAcknowledgmentReconnectTime;
    NSData *_lastReceivedPayloadHash;
    NSString *_lastReceivedTopic;
    double _lastReceivedTopicTime;
    NSNumber *_lastReceivedTimestamp;
    PCNonCellularUsabilityMonitor *_wifiMonitor;
    PCWWANUsabilityMonitor *_wwanMonitor;
    NSMutableDictionary *_connectionPortNamesToConnections;
    NSMutableDictionary *_hashesToEnabledTopics;
    NSMutableDictionary *_hashesToIgnoredTopics;
    PCPersistentTimer *_criticalReliabilityTimer;
    void *_criticalReliabilityPowerAssertion;
    NSTimer *_connectionEstablishTimer;
    void *_connectionEstablishPowerAssertion;
    NSTimer *_keepAliveTimer;
    void *_keepAlivePowerAssertion;
    APSOutgoingMessageQueue *_outgoingMessageQueue;
    NSDate *_startedOpeningStream;
    NSDate *_keepAliveSent;
    NSDate *_timeSinceLastKeepAlive;
    double _slowReceiveThreshold;
}

@property(readonly, nonatomic) APSEnvironment *environment; // @synthesize environment=_environment;
@property(nonatomic) BOOL isConnectedToService; // @synthesize isConnectedToService=_isConnectedToService;
- (void)_keepAliveResponseTimerFired:(id)arg1;
- (void)_clearKeepAliveResponseTimer;
- (void)_startKeepAliveResponseTimer;
- (void)_connectionEstablishTimerFired:(id)arg1;
- (void)_clearConnectionEstablishTimer;
- (void)_startConnectionEstablishTimer;
- (void)outgoingMessageQueueRequestCriticalMessageFlush:(id)arg1 withPaddingLength:(int)arg2;
- (void)outgoingMessageQueue:(id)arg1 lateAcknowledgmentForCriticalOutgoingMessage:(id)arg2;
- (void)_handleOutgoingMessageAcknowledgment:(id)arg1;
- (void)_sendQueuedOutgoingMessages;
- (void)_sendOutgoingMessage:(id)arg1;
- (void)_handleFlushMessage:(id)arg1;
- (void)_handleKeepAliveResponseMessage:(id)arg1;
- (void)_performKeepAlive;
- (void)_performFlushWithPaddingLength:(int)arg1;
- (id)_copyParsedPayload:(id)arg1 messageId:(id *)arg2 errorString:(id *)arg3;
- (void)_handleMessageMessage:(id)arg1;
- (void)_sendFilterMessage;
- (void)_handleConnectedMessage:(id)arg1;
- (void)_pendingMessageReconnectTimerFired;
- (void)_handleConnectionFailureForcingDelayedReconnect:(BOOL)arg1;
- (void)tcpStream:(id)arg1 errorOccured:(id)arg2;
- (void)tcpStreamEndEncountered:(id)arg1;
- (unsigned int)tcpStream:(id)arg1 dataReceived:(id)arg2;
- (void)tcpStreamHasConnected:(id)arg1;
- (void)tcpStream:(id)arg1 hasDeterminedServerHostname:(id)arg2;
- (void)tcpStream:(id)arg1 receivedServerBag:(id)arg2;
- (void)connectionManager:(id)arg1 handleEvent:(int)arg2;
- (void)interfaceLinkQualityChanged:(id)arg1 previousLinkQuality:(int)arg2;
- (void)_powerLogEvent:(id)arg1 dictionary:(id)arg2;
- (BOOL)_shouldPowerLogEvent:(id)arg1;
- (void)_deleteClientIdentityRequestingReplacement;
- (struct __SecIdentity *)_getClientIdentity;
- (void)_disconnectStream;
- (BOOL)_connectStreamWithInterfacePreference:(int)arg1;
- (void)_adjustConnection;
- (BOOL)_adjustConnectionWithInterfacePreference:(int)arg1;
- (void)setEnabled:(BOOL)arg1;
@property(readonly, nonatomic) double currentKeepAliveInterval; // @dynamic currentKeepAliveInterval;
- (void)setMessageSize:(unsigned int)arg1;
@property(readonly, nonatomic) unsigned int messageSize; // @dynamic messageSize;
- (void)setPublicToken:(id)arg1;
@property(readonly, nonatomic) NSData *publicToken; // @dynamic publicToken;
- (void)_updateConnectionManagerKeepAliveInterval;
- (void)__updateConnectionManagerKeepAliveInterval;
- (id)_copyHashForTopic:(id)arg1;
- (id)_copyHashForData:(id)arg1;
- (void)_logChangesFor:(id)arg1 oldTopics:(id)arg2 newTopics:(id)arg3;
- (void)_recreateCacheDictionaries;
- (void)requestConnectionIfNeeded;
- (void)_criticalReliabilityTimerFired;
- (void)_criticalReliabilityFlushTimerFired;
- (void)_requestKeepAlive:(BOOL)arg1 orConnection:(BOOL)arg2;
- (void)_recalculateCriticalReliability;
- (void)connection:(id)arg1 didReceiveFakeMessageToSend:(id)arg2;
- (void)connection:(id)arg1 didReceiveCancellationForOutgoingMessageWithID:(unsigned int)arg2;
- (void)connection:(id)arg1 didReceiveOutgoingMessageToSend:(id)arg2;
- (void)connectionChangedCriticalReliability:(id)arg1;
- (BOOL)connectionDelegateIsConnectedToService:(id)arg1;
- (BOOL)connectionDelegateHasIdentity:(id)arg1;
- (void)connectionWasClosed:(id)arg1;
- (void)connectionTopicsChanged:(id)arg1;
- (void)removeConnectionForConnectionPortName:(id)arg1;
- (id)interfaceMonitor;
- (int)linkQuality;
- (unsigned int)connectionType;
- (id)connectionForConnectionPortName:(id)arg1;
@property(readonly, nonatomic) BOOL hasIdentity;
- (void)addConnection:(id)arg1;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithEnvironment:(id)arg1 delegate:(id)arg2;

@end

