/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "GKClientProtocol-Protocol.h"

@class NSObject<OS_dispatch_queue>, NSXPCConnection;

@interface GKServerProxy : NSObject <GKClientProtocol>
{
    NSXPCConnection *_connection;
    BOOL _networkIndicatorEnabled;
    int _networkIndicatorCount;
    int _authState;
    NSObject<OS_dispatch_queue> *_authQueue;
    id <GKServerProxyDataUpdateDelegate> _dataUpdateDelegate;
}

+ (id)serverProxy;
@property(nonatomic) id <GKServerProxyDataUpdateDelegate> dataUpdateDelegate; // @synthesize dataUpdateDelegate=_dataUpdateDelegate;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2;
- (oneway void)setBadgeCount:(unsigned int)arg1 forType:(unsigned int)arg2;
- (oneway void)challengeCompleted:(id)arg1;
- (oneway void)challengeReceived:(id)arg1;
- (oneway void)completedChallengeSelected:(id)arg1;
- (oneway void)receivedChallengeSelected:(id)arg1;
- (oneway void)respondedToNearbyInvite:(id)arg1;
- (oneway void)resetNetworkActivity;
- (oneway void)endNetworkActivity;
- (oneway void)beginNetworkActivity;
- (void)handleServerError:(id)arg1;
- (void)dealloc;
- (int)authState;
- (BOOL)setAuthState:(int)arg1;
- (id)init;
- (void)terminateDaemon;
- (void)getStoreItemsForAdamIDs:(id)arg1 handler:(id)arg2;
- (void)getImageDataForURL:(id)arg1 handler:(id)arg2;
- (void)getImageForURL:(id)arg1 handler:(id)arg2;
- (void)getStoreBagValuesForKeys:(id)arg1 handler:(id)arg2;
- (void)openSettings;
- (void)clearBadgeCountOfType:(unsigned int)arg1;
- (void)clearBulletinsForReceivedChallenges:(id)arg1;
- (void)clearBulletinsOfType:(int)arg1 forPlayerIDs:(id)arg2;
- (void)handleBulletinResponse:(id)arg1;
- (void)updateNotificationTopics;
- (void)submitAWDMetrics:(id)arg1;
- (void)markFriendRecommendations:(id)arg1 viewed:(BOOL)arg2 handler:(id)arg3;
- (void)dismissFriendRecommendations:(id)arg1 handler:(id)arg2;
- (void)getFriendRecommendationsWithHandler:(id)arg1;
- (void)removeFriend:(id)arg1 handler:(id)arg2;
- (void)declineFriendRequestsFromPlayerIDs:(id)arg1 handler:(id)arg2;
- (void)acceptFriendRequestsFromPlayerIDs:(id)arg1 withHandles:(id)arg2 handler:(id)arg3;
- (void)sendFriendRequestToPlayerIDs:(id)arg1 emailAddresses:(id)arg2 aliases:(id)arg3 twitterScreenNames:(id)arg4 facebookIDs:(id)arg5 message:(id)arg6 rid:(id)arg7 handler:(id)arg8;
- (void)getFriendRequestsWithHandler:(id)arg1;
- (void)getCommonFriendsForPlayer:(id)arg1 handler:(id)arg2;
- (void)getFriendsForPlayer:(id)arg1 handler:(id)arg2;
- (void)submitRating:(float)arg1 forGame:(id)arg2 handler:(id)arg3;
- (void)markGameRecommendations:(id)arg1 viewed:(BOOL)arg2 handler:(id)arg3;
- (void)dismissGameRecommendations:(id)arg1 handler:(id)arg2;
- (void)getGameRecommendationsWithHandler:(id)arg1;
- (void)startGameWithChallenge:(id)arg1;
- (void)abortChallenges:(id)arg1 handler:(id)arg2;
- (void)issueChallenge:(id)arg1 toPlayerIDs:(id)arg2 handler:(id)arg3;
- (void)getDetailsForChallenges:(id)arg1 handler:(id)arg2;
- (void)getChallengesForGame:(id)arg1 handler:(id)arg2;
- (void)setDefaultLeaderboard:(id)arg1 handler:(id)arg2;
- (void)getLeaderboardsForGame:(id)arg1 player:(id)arg2 handler:(id)arg3;
- (void)submitScores:(id)arg1 handler:(id)arg2;
- (void)getAchievementsLeaderboard:(id)arg1 handler:(id)arg2;
- (void)getScoresForLeaderboard:(id)arg1 game:(id)arg2 handler:(id)arg3;
- (void)resetAchievementsWithHandler:(id)arg1;
- (void)submitAchievements:(id)arg1 handler:(id)arg2;
- (void)getAchievementsForGame:(id)arg1 players:(id)arg2 handler:(id)arg3;
- (void)getAchievementDescriptionsForGame:(id)arg1 handler:(id)arg2;
- (void)getRecentMatchesForGame:(id)arg1 otherPlayer:(id)arg2 handler:(id)arg3;
- (void)getPlayersForGame:(id)arg1 achievementID:(id)arg2 handler:(id)arg3;
- (void)getPlayersForGame:(id)arg1 leaderboardID:(id)arg2 handler:(id)arg3;
- (void)getPlayersForGame:(id)arg1 compatibleGames:(BOOL)arg2 handler:(id)arg3;
- (void)getPlayerRatingWithHandler:(id)arg1;
- (void)getPlayerStatsForGames:(id)arg1 player:(id)arg2 handler:(id)arg3;
- (oneway void)getCompatibilityMatrix:(id)arg1 handler:(id)arg2;
- (void)getMetadataForGames:(id)arg1 handler:(id)arg2;
- (void)removeGameForBundleID:(id)arg1 handler:(id)arg2;
- (void)getGamesWithAchievementStatsForPlayer:(id)arg1 handler:(id)arg2;
- (void)getGamesForPlayer:(id)arg1 includeInstalled:(BOOL)arg2 handler:(id)arg3;
- (void)getTopGamesWithHandler:(id)arg1;
- (void)accountEdited:(id)arg1 alias:(id)arg2 firstName:(id)arg3 lastName:(id)arg4 handler:(id)arg5;
- (void)accountCreated:(id)arg1 playerID:(id)arg2 authenticationToken:(id)arg3 alias:(id)arg4 finished:(BOOL)arg5 handler:(id)arg6;
- (void)signOutPlayerWithHandler:(id)arg1;
- (void)authenticationDisabledWithHandler:(id)arg1;
- (void)authenticationCancelledWithHandler:(id)arg1;
- (void)validateAccountWithPassword:(id)arg1 handler:(id)arg2;
- (void)authenticatePlayerWithUsername:(id)arg1 password:(id)arg2 handler:(id)arg3;
- (void)setupAccountForParameters:(id)arg1 handler:(id)arg2;
- (void)getAccountURLsWithHandler:(id)arg1;
- (id)authenticatedPlayerID;
- (id)accountName;
- (BOOL)hasAuthenticatedAccount;
- (BOOL)_isAuthenticatedWithResponse:(id)arg1;
- (void)accountTypesAvailableForLinkingWithHandler:(id)arg1;
- (void)updateLinkedAccountsForService:(unsigned int)arg1 withAuthToken:(id)arg2 handler:(id)arg3;
- (void)linkAccounts:(BOOL)arg1 withAuthToken:(id)arg2 forService:(unsigned int)arg3 mayAskAgainLater:(BOOL)arg4 handler:(id)arg5;
- (void)shouldAskToLinkAccountsForService:(unsigned int)arg1 handler:(id)arg2;
- (void)incrementNumberOfResponsesForService:(unsigned int)arg1 handler:(id)arg2;
- (void)updateContactsWithHandler:(id)arg1;
- (void)deletePhotoWithHandler:(id)arg1;
- (void)setPhotoData:(id)arg1 handler:(id)arg2;
- (void)cachePhotos:(id)arg1 handler:(id)arg2;
- (void)addEmail:(id)arg1 handler:(id)arg2;
- (void)setStatus:(id)arg1 handler:(id)arg2;
- (void)getProfilesForPlayerIDs:(id)arg1 pieces:(unsigned int)arg2 handler:(id)arg3;
- (void)setNearbyMultiplayerOverride:(id)arg1;
- (void)nearbyInviteWasCancelled:(id)arg1;
- (void)presentNearbyInvite:(id)arg1;
- (void)updateCacheWithNearbyProfileDictionary:(id)arg1;
- (void)getLastTurnBasedEventWithHandler:(id)arg1;
- (void)completeTurnBasedMatch:(id)arg1 handler:(id)arg2;
- (void)resignFromTurnBasedGame:(id)arg1 outcome:(unsigned int)arg2 handler:(id)arg3;
- (void)saveDataForTurnBasedMatch:(id)arg1 handler:(id)arg2;
- (void)submitTurnForTurnBasedMatch:(id)arg1 nextParticipantIndexes:(id)arg2 turnTimeout:(double)arg3 handler:(id)arg4;
- (void)removeTurnBasedMatch:(id)arg1 handler:(id)arg2;
- (void)declineInviteForTurnBasedMatch:(id)arg1 handler:(id)arg2;
- (void)acceptInviteForTurnBasedMatch:(id)arg1 handler:(id)arg2;
- (void)getDetailsForTurnBasedMatchIDs:(id)arg1 includeGameData:(BOOL)arg2 handler:(id)arg3;
- (void)getTurnBasedMatchesWithHandler:(id)arg1;
- (void)createTurnBasedGameForMatchRequest:(id)arg1 individualMessages:(id)arg2 handler:(id)arg3;
- (void)cancelRelayRequest:(id)arg1 handler:(id)arg2;
- (void)updateRelayRequest:(id)arg1 handler:(id)arg2;
- (void)initiateRelayRequest:(id)arg1 handler:(id)arg2;
- (void)sendReconnectInvitation:(id)arg1 playerID:(id)arg2 connectionData:(id)arg3 sessionToken:(id)arg4 pushToken:(id)arg5 handler:(id)arg6;
- (void)getInviteSessionTokenWithHandler:(id)arg1;
- (void)invitePlayers:(id)arg1 toGame:(id)arg2 handler:(id)arg3;
- (void)getPlayersToInviteWithHandler:(id)arg1;
- (void)getAcceptedGameInviteWithHandler:(id)arg1;
- (void)declineGameInvite:(id)arg1 reason:(int)arg2 handler:(id)arg3;
- (void)acceptGameInvite:(id)arg1 connectionData:(id)arg2 handler:(id)arg3;
- (void)cancelGameInviteWithHandler:(id)arg1;
- (void)removePlayersFromGameInvite:(id)arg1 handler:(id)arg2;
- (void)invitePlayersForMatchRequest:(id)arg1 onlineConnectionData:(id)arg2 nearbyConnectionData:(id)arg3 handler:(id)arg4;
- (void)getOverallFlowRateWithHandler:(id)arg1;
- (void)getFlowRateForPlayerGroup:(int)arg1 handler:(id)arg2;
- (void)cancelOutstandingMatchRequestWithHandler:(id)arg1;
- (void)getPlayersForMatchRequest:(id)arg1 connectionData:(id)arg2 connectedPeers:(int)arg3 rematchID:(id)arg4 handler:(id)arg5;

@end

